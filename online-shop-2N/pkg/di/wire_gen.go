// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"online-shop-2N/pkg/api"
	"online-shop-2N/pkg/api/handlers"
	"online-shop-2N/pkg/api/middlewares"
	"online-shop-2N/pkg/config"
	"online-shop-2N/pkg/database"
	"online-shop-2N/pkg/repositories"
	"online-shop-2N/pkg/services/cloud"
	"online-shop-2N/pkg/services/otp"
	"online-shop-2N/pkg/services/tokens"
	"online-shop-2N/pkg/usecases"
)

// Injectors from wire.go:

func InitializeApi(cfg config.Config) (*http.ServerHTTP, error) {
	db, err := database.ConnectToDB(cfg)
	if err != nil {
		return nil, err
	}
	authRepository := repositories.NewAuthRepository(db)
	tokenService := tokens.NewTokenService(cfg)
	userRepository := repositories.NewUserRepository(db)
	adminRepository := repositories.NewAdminRepository(db)
	otpAuth := otp.NewOtpAuth(cfg)
	authUseCase := usecases.NewAuthUseCase(authRepository, tokenService, userRepository, adminRepository, otpAuth)
	authHandler := handlers.NewAuthHandler(authUseCase, cfg)
	middleware := middlewares.NewMiddleware(tokenService)
	adminUseCase := usecases.NewAdminUseCase(adminRepository, userRepository)
	adminHandler := handlers.NewAdminHandler(adminUseCase)
	cartRepository := repositories.NewCartRepository(db)
	productRepository := repositories.NewProductRepository(db)
	userUseCase := usecases.NewUserUseCase(userRepository, cartRepository, productRepository)
	userHandler := handlers.NewUserHandler(userUseCase)
	cartUseCase := usecases.NewCartUseCase(cartRepository, productRepository)
	cartHandler := handlers.NewCartHandler(cartUseCase)
	paymentRepository := repositories.NewPaymentRepository(db)
	orderRepository := repositories.NewOrderRepository(db)
	couponRepository := repositories.NewCouponRepository(db)
	paymentUseCase := usecases.NewPaymentUseCase(paymentRepository, orderRepository, userRepository, cartRepository, couponRepository, cfg)
	paymentHandler := handlers.NewPaymentHandler(paymentUseCase)
	cloudService, err := cloud.NewAWSCloudService(cfg)
	if err != nil {
		return nil, err
	}
	productUseCase := usecases.NewProductUseCase(productRepository, cloudService)
	productHandler := handlers.NewProductHandler(productUseCase)
	categoryRepository := repositories.NewCategoryRepository(db)
	categoryUseCase := usecases.NewCategoryUseCase(categoryRepository)
	categoryHandler := handlers.NewCategoryHandler(categoryUseCase)
	orderUseCase := usecases.NewOrderUseCase(orderRepository, cartRepository, userRepository, paymentRepository)
	orderHandler := handlers.NewOrderHandler(orderUseCase)
	couponUseCase := usecases.NewCouponUseCase(couponRepository, cartRepository)
	couponHandler := handlers.NewCouponHandler(couponUseCase)
	offerRepository := repositories.NewOfferRepository(db)
	offerUseCase := usecases.NewOfferUseCase(offerRepository)
	offerHandler := handlers.NewOfferHandler(offerUseCase)
	stockRepository := repositories.NewStockRepository(db)
	stockUseCase := usecases.NewStockUseCase(stockRepository)
	stockHandler := handlers.NewStockHandler(stockUseCase)
	brandRepository := repositories.NewBrandDatabaseRepository(db)
	brandUseCase := usecases.NewBrandUseCase(brandRepository)
	brandHandler := handlers.NewBrandHandler(brandUseCase)
	serverHTTP := http.NewServerHTTP(authHandler, middleware, adminHandler, userHandler, cartHandler, paymentHandler, productHandler, categoryHandler, orderHandler, couponHandler, offerHandler, stockHandler, brandHandler)
	return serverHTTP, nil
}
